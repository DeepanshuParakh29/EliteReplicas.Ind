import { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';
import { 
  onAuthStateChanged, 
  signOut as firebaseSignOut, 
  signInWithPopup, 
  GoogleAuthProvider, 
  getRedirectResult, 
  User as FirebaseUser,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  sendPasswordResetEmail,
  updateProfile as updateFirebaseProfile,
  UserCredential,
  updateProfile as updateFirebaseUserProfile
} from 'firebase/auth';
import { auth, db } from '@/lib/firebase';
import { useLocation } from 'wouter';
import { useToast } from '@/hooks/use-toast';
import { doc, setDoc, getDoc, serverTimestamp, DocumentData } from 'firebase/firestore';
import { ToastAction } from '@/components/ui/toast';

// Extended User type to match our application's needs
interface AppUser {
  id: string;
  firebaseUid: string;
  name: string;
  email: string;
  photoURL?: string;
  emailVerified: boolean;
  role: 'user' | 'admin' | 'super_admin';
  isActive: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
}

// Helper function to convert Firestore timestamps to Date
const toDate = (date: Date | string | { toDate: () => Date } | undefined): Date | undefined => {
  if (!date) return undefined;
  if (date instanceof Date) return date;
  if (typeof date === 'string') return new Date(date);
  if (typeof date === 'object' && 'toDate' in date) return date.toDate();
  return new Date();
};

type AuthUser = AppUser;

interface AuthContextType {
  firebaseUser: FirebaseUser | null;
  user: AuthUser | null;
  loading: boolean;
  error: string | null;
  signInWithEmail: (email: string, password: string) => Promise<UserCredential>;
  signUpWithEmail: (email: string, password: string, name: string) => Promise<UserCredential>;
  signOut: () => Promise<void>;
  signInWithGoogle: () => Promise<UserCredential>;
  resetPassword: (email: string) => Promise<void>;
  updateUserProfile: (updates: Partial<AuthUser>) => Promise<void>;
}

export const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

// Initialize Google Auth Provider
const googleProvider = new GoogleAuthProvider();
googleProvider.addScope('profile');
googleProvider.addScope('email');

export const AuthProvider = ({ children }: AuthProviderProps) => {
  const [firebaseUser, setFirebaseUser] = useState<FirebaseUser | null>(null);
  const [user, setUser] = useState<AuthUser | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [, navigate] = useLocation();
  const { toast } = useToast();

  // Create or update user in Firestore
  const createOrUpdateUserInFirestore = useCallback(async (user: FirebaseUser): Promise<AuthUser> => {
    if (!db) {
      throw new Error('Database not available');
    }
    
    const userRef = doc(db, 'users', user.uid);
    const userSnap = await getDoc(userRef);
    
    const userData: Omit<AuthUser, 'id'> = {
      firebaseUid: user.uid,
      name: user.displayName || user.email?.split('@')[0] || 'User',
      email: user.email || '',
      photoURL: user.photoURL || '',
      emailVerified: user.emailVerified,
      role: 'user',
      isActive: true,
      updatedAt: new Date(),
      ...(userSnap.exists() ? {} : { createdAt: new Date() })
    };
    
    await setDoc(userRef, userData, { merge: true });
    return { id: user.uid, ...userData };
  }, []);

  // Handle email/password sign in
  const signInWithEmail = async (email: string, password: string): Promise<UserCredential> => {
    if (!auth) throw new Error('Authentication service not available');
    
    try {
      setLoading(true);
      setError(null);
      const result = await signInWithEmailAndPassword(auth, email, password);
      return result;
    } catch (error: any) {
      console.error('Sign in error:', error);
      setError(error.message);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  // Handle email/password sign up
  const signUpWithEmail = async (email: string, password: string, name: string): Promise<UserCredential> => {
    if (!auth) throw new Error('Authentication service not available');
    
    try {
      setLoading(true);
      setError(null);
      const result = await createUserWithEmailAndPassword(auth, email, password);
      
      // Update profile with display name
      if (auth.currentUser) {
        await updateFirebaseProfile(auth.currentUser, { displayName: name });
      }
      
      return result;
    } catch (error: any) {
      console.error('Sign up error:', error);
      setError(error.message);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  // Handle Google sign in
  const signInWithGoogle = async (): Promise<UserCredential> => {
    if (!auth) {
      const error = 'Firebase authentication is not configured';
      setError(error);
      throw new Error(error);
    }
    
    try {
      setLoading(true);
      setError(null);
      const result = await signInWithPopup(auth, googleProvider);
      return result;
    } catch (error: any) {
      console.error('Google sign in error:', error);
      setError(error.message);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  // Handle password reset
  const resetPassword = async (email: string): Promise<void> => {
    if (!auth) throw new Error('Authentication service not available');
    
    try {
      setLoading(true);
      await sendPasswordResetEmail(auth, email);
      toast({
        title: 'Password Reset Email Sent',
        description: 'Check your email for the password reset link.',
      });
    } catch (error: any) {
      console.error('Password reset error:', error);
      setError(error.message);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  // Update user profile
  const updateUserProfile = async (updates: Partial<AuthUser>): Promise<void> => {
    if (!auth?.currentUser) throw new Error('Not authenticated');
    
    try {
      setLoading(true);
      
      // Update Firebase Auth profile
      const authUpdates: { displayName?: string; photoURL?: string } = {};
      if (updates.name) authUpdates.displayName = updates.name;
      if (updates.photoURL) authUpdates.photoURL = updates.photoURL;
      
      if (Object.keys(authUpdates).length > 0) {
        await updateFirebaseProfile(auth.currentUser, authUpdates);
      }
      
      // Update Firestore user document
      if (db) {
        const userRef = doc(db, 'users', auth.currentUser.uid);
        await setDoc(userRef, 
          { 
            ...updates, 
            updatedAt: serverTimestamp() 
          }, 
          { merge: true }
        );
      }
      
      // Update local state
      setUser(prev => prev ? { ...prev, ...updates } : null);
      
    } catch (error) {
      console.error('Profile update error:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  // Sign out
  const signOut = async (): Promise<void> => {
    if (!auth) return;
    
    try {
      await firebaseSignOut(auth);
      setFirebaseUser(null);
      setUser(null);
      navigate('/login');
    } catch (error) {
      console.error('Sign out error:', error);
      throw error;
    }
  };

  // Handle auth state changes
  useEffect(() => {
    if (!auth) {
      setLoading(false);
      return;
    }

    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      try {
        if (user) {
          // User is signed in
          setFirebaseUser(user);
          
          try {
            // Get or create user in Firestore
            const userData = await createOrUpdateUserInFirestore(user);
            setUser(userData);
            
            // Set auth token for API requests
            const idToken = await user.getIdToken();
            // You can store this token in memory or in an HTTP-only cookie
            // For now, we'll just log it
            console.log('User authenticated with ID token:', idToken);
            
            // Redirect to home after successful authentication
            if (window.location.pathname === '/login' || window.location.pathname === '/signup') {
              navigate('/');
            }
          } catch (error) {
            console.error('Error in user data handling:', error);
            setError('Failed to process user data');
          }
        } else {
          // User is signed out
          setFirebaseUser(null);
          setUser(null);
        }
      } catch (error) {
        console.error('Auth state change error:', error);
        setError('Failed to process authentication state');
      } finally {
        if (loading) setLoading(false);
      }
    });

    // Cleanup subscription on unmount
    return () => unsubscribe();
  }, [auth, createOrUpdateUserInFirestore, loading, navigate]);

  // Handle Google OAuth redirect
  useEffect(() => {
    const handleGoogleRedirect = async () => {
      if (!auth) return;
      
      try {
        const result = await getRedirectResult(auth);
        if (result?.user) {
          console.log("Google sign-in successful:", result.user.uid);
          navigate("/");
        }
      } catch (error: any) {
        console.error("Error during Google redirect:", error);
        setError(error.message || "Failed to complete Google sign-in");
      }
    };

    handleGoogleRedirect();
  }, [auth, navigate]);

  const value: AuthContextType = {
    firebaseUser,
    user,
    loading,
    error,
    signInWithEmail,
    signUpWithEmail,
    signOut,
    signInWithGoogle,
    resetPassword,
    updateUserProfile,
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading ? children : <div>Loading...</div>}
    </AuthContext.Provider>
  );
};
